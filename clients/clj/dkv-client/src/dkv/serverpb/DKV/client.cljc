;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC dkv.serverpb.DKV Client Implementation
;;;----------------------------------------------------------------------------------
(ns dkv.serverpb.DKV.client
  (:require [dkv.serverpb :refer :all]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(defn Put
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "dkv.serverpb.DKV"
              :method  "Put"
              :input   {:f dkv.serverpb/new-PutRequest :ch input}
              :output  {:f dkv.serverpb/pb->PutResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Get
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "dkv.serverpb.DKV"
              :method  "Get"
              :input   {:f dkv.serverpb/new-GetRequest :ch input}
              :output  {:f dkv.serverpb/pb->GetResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn MultiGet
  [client params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "dkv.serverpb.DKV"
              :method  "MultiGet"
              :input   {:f dkv.serverpb/new-MultiGetRequest :ch input}
              :output  {:f dkv.serverpb/pb->MultiGetResponse :ch output}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output))))))

(defn Iterate
  [client params reply]
  (let [input (async/chan 1)
        desc {:service "dkv.serverpb.DKV"
              :method  "Iterate"
              :input   {:f dkv.serverpb/new-IterateRequest :ch input}
              :output  {:f dkv.serverpb/pb->IterateResponse :ch reply}}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc))))))

